functions: 
  - node-id-exists
  - interface-id-exists
  - node-has-relationship
  - numerical-placeholder
  - ids-are-unique

rules:
  pattern-has-nodes-relationships:
    description: Has top level nodes and relationships
    message: Should have nodes and relationships as top level properties on the CALM document
    severity: error
    given: "$.properties"
    then:
      - field: nodes
        function: truthy
      - field: relationships
        function: truthy
  
  pattern-has-no-empty-properties:
    description: Must not contain string properties set to the empty string or numerical properties set to zero
    message: All properties must be set to a nonempty, nonzero value.
    severity: error
    given: "$..*"
    then:
      function: truthy

  
  pattern-has-no-placeholder-properties-numerical:
    description: Should not contain numerical placeholder properties set to -1
    message: Numerical placeholder (-1) detected in instantiated pattern.
    severity: warn
    given: "$..*"
    then:
      function: numerical-placeholder
      
  
  pattern-has-no-placeholder-properties-string:
    description: Should not contain placeholder values with pattern {{ PLACEHOLDER_NAME }}
    message: String placeholder detected in instantiated pattern.
    severity: warn
    given: "$..*"
    then:
      function: pattern
      functionOptions:
        notMatch: "^{{\\s*[A-Z_]+\\s*}}$"

  connects-relationship-references-existing-nodes-in-pattern:
    description: Connect relationships with const properties must reference existing nodes
    severity: error 
    message: "{{error}}"
    given: "$..connects.source.node"
    then:
      # only container and actor are in scope, since source/destination use interfaces now
      function: node-id-exists


  group-relationship-references-existing-nodes-in-pattern:
    description: All nodes referenced by a grouping relationship must reference existing nodes
    severity: error 
    message: "{{error}}"
    given: "$..relationship-type..nodes[*]"
    then:
      # only container and actor are in scope, since source/destination use interfaces now
      function: node-id-exists

  avoid-boolean-properties:
    description: Boolean property detected. Booleans should ideally be avoided as they are closed for extension; have you considered using an enum instead?
    severity: warn 
    message: Boolean property detected. Booleans should ideally be avoided as they are closed for extension; have you considered using an enum instead?
    given: "$..type"
    then: 
      function: pattern 
      functionOptions:
        notMatch: /boolean/

  relationship-references-existing-nodes-in-pattern:
    description: Relationships with const properties must reference existing nodes
    severity: error 
    message: "{{error}}"
    given: "$..relationship-type.*.*"
    then:
      # only container and actor are in scope, since source/destination use interfaces now
      - function: node-id-exists
        field: actor 
      - function: node-id-exists
        field: container


  referenced-interfaces-defined-in-pattern:
    description: Referenced interfaces must be defined 
    severity: error 
    message: "{{error}}"
    given: "$..relationship-type.const.connects.*.interfaces[*]" # both source and destination
    then:
      # node uses the interface structure so has a sub object
      function: interface-id-exists

  pattern-nodes-must-be-referenced:
    description: Nodes must be referenced by at least one relationship
    severity: warn
    message: "{{error}}"
    given: "$.properties.nodes.prefixItems[*].properties.unique-id.const"
    then:
      function: node-has-relationship

  unique-ids-must-be-unique-in-pattern:
    description: Unique IDs cannot be reused.
    severity: error
    message: "{{error}}"
    given: $
    then:
      function: ids-are-unique